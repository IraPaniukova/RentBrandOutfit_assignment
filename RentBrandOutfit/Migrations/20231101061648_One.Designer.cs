// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentBrandOutfit.Areas.Identity.Data;

#nullable disable

namespace RentBrandOutfit.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20231101061648_One")]
    partial class One
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "03180c43-74d7-4dd6-95a2-6e370510715f",
                            ConcurrencyStamp = "77ad0110-496e-4a93-a151-afef4fc968bd",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "4c7b0159-8a2d-4c2a-b03d-6b0857ed93c2",
                            ConcurrencyStamp = "f4bfc2e6-8fb9-465c-999f-e991c1a7e0b9",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "b7daa8a6-9586-4478-bffc-152e54edbd9b",
                            ConcurrencyStamp = "7454f8b1-4737-4de2-844d-a6d0524e6f84",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "ef56e2ae-82be-453e-b60a-caf9863eecdd",
                            ConcurrencyStamp = "a5347336-4afe-4229-866a-3b391d43dc1b",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "781c8a9c-9fba-470e-8ff3-390490df0e68",
                            RoleId = "03180c43-74d7-4dd6-95a2-6e370510715f"
                        },
                        new
                        {
                            UserId = "01ec60fb-50f1-4f5a-993f-c67f68839cdc",
                            RoleId = "4c7b0159-8a2d-4c2a-b03d-6b0857ed93c2"
                        },
                        new
                        {
                            UserId = "5e13b5e8-dcf5-4ed1-bd30-682b54815297",
                            RoleId = "b7daa8a6-9586-4478-bffc-152e54edbd9b"
                        },
                        new
                        {
                            UserId = "8bc475b8-4471-4fdd-926a-160c19fda93b",
                            RoleId = "ef56e2ae-82be-453e-b60a-caf9863eecdd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentBrandOutfit.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "781c8a9c-9fba-470e-8ff3-390490df0e68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcde12eb-82c5-4dab-adaf-3fe8b24f5d88",
                            Email = "administrator@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@EXAMPLE.COM",
                            NormalizedUserName = "ADMINISTRATOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAaJ76DZ2BGJHdorodlRWhJ32EFmEXWwmrH7fqIbHGilE8RgwD/PK6Ubjpp4oXabLQ==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8f7f443-0508-47dc-86b9-7ec1d3e8854e",
                            TwoFactorEnabled = false,
                            UserName = "administrator@example.com"
                        },
                        new
                        {
                            Id = "01ec60fb-50f1-4f5a-993f-c67f68839cdc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8aeb8d4e-2469-48c4-be99-732a33291d13",
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI7ePnthgxRJW+nX1yCqvKze/2ZuMpXYUUnuyN8nMhhN2zq/9yQOgRmMo7+3BhXs0g==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d50db6d-9327-4c13-8e10-c90fce5d39b2",
                            TwoFactorEnabled = false,
                            UserName = "manager@example.com"
                        },
                        new
                        {
                            Id = "5e13b5e8-dcf5-4ed1-bd30-682b54815297",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e877d0d7-0eff-439f-987a-c67784a1404a",
                            Email = "editor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@EXAMPLE.COM",
                            NormalizedUserName = "EDITOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJMF7r9LTZmvOiG5cGnzPZ0K5rpyx7KEFtV5+qwTSJcFMpL42fURtx4Q9zHHMSFbPA==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bce60a2-22e4-47b2-b7e8-df43c5007409",
                            TwoFactorEnabled = false,
                            UserName = "editor@example.com"
                        },
                        new
                        {
                            Id = "8bc475b8-4471-4fdd-926a-160c19fda93b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99532081-d7f2-4a80-bc03-c85a037cc2f3",
                            Email = "visitor@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VISITOR@EXAMPLE.COM",
                            NormalizedUserName = "VISITOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIAfZCOqoqt1omyzSW7uXHEJ3VulOiQ5bnfc9wN/cy9ihp9VzM6Z7nIHisb7czC0iQ==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0c0e643-f983-4b36-9b41-01ef7cf3705d",
                            TwoFactorEnabled = false,
                            UserName = "visitor@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RentBrandOutfit.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RentBrandOutfit.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentBrandOutfit.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RentBrandOutfit.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
